fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
legend.position = c(1.03, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 7, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
gr = ggplot(df, aes(area = number_of_users, fill = number_of_users, label = label)) +
geom_treemap(layout = "squarified", color = "#f8f2f9", start = "topleft", radius = unit(2, "pt")) +
geom_treemap_text(
colour = "white",
# size = 15,
layout = "squarified",
start = "topleft",
grow = FALSE,
reflow = TRUE,
min.size = .5,
family = "Candara") +
# scale_fill_manual(values = col) +
scale_fill_stepsn(
colors = rev(col),
breaks = c(50000, 100000, 500000, 1000000, 5000000),
transform = "log2",
labels = c("50K", "100K", "500K", "1M", "5M"),
guide = guide_colorsteps(barwidth = unit(0.5, "lines"),
barheight = unit(10, "lines"))
) +
labs(
title = "The Most Used Programming Languages",
subtitle = "Estimated number of users for programming languages based on PLDB data.",
caption = "Source: <b> Programming Language DataBase </b> | Graphic: <b>Natasa Anastasiadou</b>",
fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
legend.position = c(1.04, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 7, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
ggsave(
plot = gr, filename = "Rplot.png",
width = 9, height = 10, units = "in", dpi = 600
)
ggsave(
plot = gr, filename = "Rplot.png",
width = 10, height = 12, units = "in", dpi = 600
)
gr = ggplot(df, aes(area = number_of_users, fill = number_of_users, label = label)) +
geom_treemap(layout = "squarified", color = "#f8f2f9", start = "topleft", radius = unit(2, "pt")) +
geom_treemap_text(
colour = "white",
# size = 15,
layout = "squarified",
start = "topleft",
grow = FALSE,
reflow = TRUE,
min.size = .5,
family = "Candara") +
# scale_fill_manual(values = col) +
scale_fill_stepsn(
colors = rev(col),
breaks = c(50000, 100000, 500000, 1000000, 5000000),
transform = "log2",
labels = c("50K", "100K", "500K", "1M", "5M"),
guide = guide_colorsteps(barwidth = unit(0.5, "lines"),
barheight = unit(10, "lines"))
) +
labs(
title = "The Most Used Programming Languages",
subtitle = "Estimated number of users for programming languages based on PLDB data.",
caption = "Source: <b> Programming Language DataBase </b> | Graphic: <b>Natasa Anastasiadou</b>",
fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
# legend.position = c(1.0, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 7, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
ggsave(
plot = gr, filename = "Rplot.png",
width = 9, height = 10, units = "in", dpi = 600
)
library(stringr)
df$pldb_id <- df$pldb_id |> str_to_upper()
label = paste0(df$pldb_id, "\n", df$number_of_users)
# Label
df[, label := paste0(pldb_id, "\n", scales::comma(number_of_users))]
col = c('#60608b', '#9291be', '#b9b8e5', '#fcc1ad', '#e7877d', '#c15451')
gr = ggplot(df, aes(area = number_of_users, fill = number_of_users, label = label)) +
geom_treemap(layout = "squarified", color = "#f8f2f9", start = "topleft", radius = unit(2, "pt")) +
geom_treemap_text(
colour = "white",
# size = 15,
layout = "squarified",
start = "topleft",
grow = FALSE,
reflow = TRUE,
min.size = .5,
family = "Candara") +
# scale_fill_manual(values = col) +
scale_fill_stepsn(
colors = rev(col),
breaks = c(50000, 100000, 500000, 1000000, 5000000),
transform = "log2",
labels = c("50K", "100K", "500K", "1M", "5M"),
guide = guide_colorsteps(barwidth = unit(0.5, "lines"),
barheight = unit(10, "lines"))
) +
labs(
title = "The Most Used Programming Languages",
subtitle = "Estimated number of users for programming languages based on PLDB data.",
caption = "Source: <b> Programming Language DataBase </b> | Graphic: <b>Natasa Anastasiadou</b>",
fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
# legend.position = c(1.0, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 7, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
gr = ggplot(df, aes(area = number_of_users, fill = number_of_users, label = label)) +
geom_treemap(layout = "squarified", color = "#f8f2f9", start = "topleft", radius = unit(2, "pt")) +
geom_treemap_text(
colour = "white",
# size = 15,
layout = "squarified",
start = "topleft",
grow = FALSE,
reflow = TRUE,
min.size = .5,
family = "Candara") +
# scale_fill_manual(values = col) +
scale_fill_stepsn(
colors = rev(col),
breaks = c(50000, 100000, 500000, 1000000, 5000000),
transform = "log2",
labels = c("50K", "100K", "500K", "1M", "5M"),
guide = guide_colorsteps(barwidth = unit(0.5, "lines"),
barheight = unit(10, "lines"))
) +
labs(
title = "The Most Used Programming Languages",
subtitle = "Estimated number of users for programming languages based on PLDB data.",
caption = "Source: <b> Programming Language DataBase </b> | Graphic: <b>Natasa Anastasiadou</b>",
fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
# legend.position = c(1.0, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 7, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
ggsave(
plot = gr, filename = "Rplot.png",
width = 9, height = 10, units = "in", dpi = 600
)
gr = ggplot(df, aes(area = number_of_users, fill = number_of_users, label = label)) +
geom_treemap(layout = "squarified", color = "#f8f2f9", start = "topleft", radius = unit(2, "pt")) +
geom_treemap_text(
colour = "white",
# size = 15,
layout = "squarified",
start = "topleft",
grow = FALSE,
reflow = TRUE,
min.size = .5,
family = "Candara") +
# scale_fill_manual(values = col) +
scale_fill_stepsn(
colors = rev(col),
breaks = c(50000, 100000, 500000, 1000000, 5000000),
transform = "log2",
labels = c("50K", "100K", "500K", "1M", "5M"),
guide = guide_colorsteps(barwidth = unit(0.5, "lines"),
barheight = unit(10, "lines"))
) +
labs(
title = "The Most Used Programming Languages",
subtitle = "Estimated number of users for programming languages based on PLDB data.",
caption = "Source: <b> Programming Language DataBase </b> | Graphic: <b>Natasa Anastasiadou</b>",
fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
# legend.position = c(1.0, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 8, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
ggsave(
plot = gr, filename = "Rplot.png",
width = 9, height = 10, units = "in", dpi = 600
)
gr = ggplot(df, aes(area = number_of_users, fill = number_of_users, label = label)) +
geom_treemap(layout = "squarified", color = "#f8f2f9", start = "topleft", radius = unit(2, "pt")) +
geom_treemap_text(
colour = "white",
size = 15,
layout = "squarified",
start = "topleft",
grow = FALSE,
reflow = TRUE,
min.size = .5,
family = "Candara") +
# scale_fill_manual(values = col) +
scale_fill_stepsn(
colors = rev(col),
breaks = c(50000, 100000, 500000, 1000000, 5000000),
transform = "log2",
labels = c("50K", "100K", "500K", "1M", "5M"),
guide = guide_colorsteps(barwidth = unit(0.5, "lines"),
barheight = unit(10, "lines"))
) +
labs(
title = "The Most Used Programming Languages",
subtitle = "Estimated number of users for programming languages based on PLDB data.",
caption = "Source: <b> Programming Language DataBase </b> | Graphic: <b>Natasa Anastasiadou</b>",
fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
# legend.position = c(1.0, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 8, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
gr = ggplot(df, aes(area = number_of_users, fill = number_of_users, label = label)) +
geom_treemap(layout = "squarified", color = "#f8f2f9", start = "topleft", radius = unit(2, "pt")) +
geom_treemap_text(
colour = "white",
size = 16,
layout = "squarified",
start = "topleft",
grow = FALSE,
reflow = TRUE,
min.size = .5,
family = "Candara") +
# scale_fill_manual(values = col) +
scale_fill_stepsn(
colors = rev(col),
breaks = c(50000, 100000, 500000, 1000000, 5000000),
transform = "log2",
labels = c("50K", "100K", "500K", "1M", "5M"),
guide = guide_colorsteps(barwidth = unit(0.5, "lines"),
barheight = unit(10, "lines"))
) +
labs(
title = "The Most Used Programming Languages",
subtitle = "Estimated number of users for programming languages based on PLDB data.",
caption = "Source: <b> Programming Language DataBase </b> | Graphic: <b>Natasa Anastasiadou</b>",
fill = "Number of users",
) +
theme_void() +
theme(
# legend.position = "bottom",
# legend.position = c(1.0, 0.5),
legend.title.position = "left",
legend.title = element_text(size = 10, angle = 90, hjust = 0.5, face = "bold", family = "Candara", color = "grey30"),
legend.text = element_text(size = 8, family = "Candara", color = "grey30"),
plot.background = element_rect(fill = "grey93", color = NA),
plot.title = element_markdown(size = 19, face = "bold", hjust = 0.5, family = "Candara", margin = margin(b = 10, t = 5)),
plot.subtitle = element_markdown(size = 15, hjust = 0.25, family = "Candara", color = "grey30", margin = margin(b = 20, t = 2)),
plot.caption = element_markdown(margin = margin(t = 20), size = 8, family = "Candara", hjust = 1.2),
plot.margin = margin(20, 20, 20, 20)
)
gr
ggsave(
plot = gr, filename = "Rplot.png",
width = 9, height = 10, units = "in", dpi = 600
)
artists <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2023/2023-01-17/artists.csv')
rm(list = ls())
gc()
artists <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2023/2023-01-17/artists.csv')
View(artists)
artists$artist_name |> unique() |> length()
artists |> head()
# Example of preparing the data
artists <- artists[order(artists$year), ]  # Sort by year
artists_summary <- artists[, .(edition_number = max(edition_number)), by = .(artist_name, year)]
# Create slope chart
ggplot(artists_summary, aes(x = year, y = edition_number, group = artist_name, color = artist_name)) +
geom_line() +
geom_point() +
labs(title = "Slope Chart of Editions Over Time by Artist",
subtitle = "Change in Edition Numbers for Each Artist Over the Years",
x = "Year",
y = "Edition Number",
color = "Artist Name") +
theme_minimal()
rolling_stone <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-05-07/rolling_stone.csv')
View(rolling_stone)
rolling_stone$album |> unique() |> length()
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) ),  ]
View(df)
df$release_year |> unique()
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & release_year > 1980),  ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & release_year > 1990),  ]
df$type |> unique()
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & type == "Studio"),  ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & type == "Live"),  ]
View(df)
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & type == "Compilation"),  ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & type == "Greatest Hits"),  ]
View(df)
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & type == "Studio"),  ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & type == "Studio" & release_year > 1980),  ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020) & type == "Studio" & release_year > 1990),  ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020)), ]
df <- df[ which(type == "Studio" & release_year > 1990), ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020)), ]
df$sort_name |> duplicated()
df$sort_name |> duplicated() |> which()
index = df$sort_name |> duplicated() |> which()
df <- df[ index, ]
df <- df[ which( release_year > 1980 ), ]
index = df$sort_name |> duplicated() |> which()
df <- df[ index, ]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020)), ]
df <- df[ which( release_year > 1980 ), ]
df <- df[ which( release_year > 1980 & weeks_on_billboard > 100 ), ]
df
df <- df[, .(clean_name, album, rank_2003, rank_2012, rank_2020)]
View(df)
View(df)
df
# Reshape the data to long format
df_long <- df[, .(clean_name, rank_2003, rank_2012, rank_2020)]
df_long <- melt(df_long, id.vars = "clean_name", variable.name = "year", value.name = "rank")
# Convert year to numeric for proper ordering
df_long$year <- as.numeric(gsub("rank_", "", df_long$year))
# Plot bump chart
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name)) +
geom_bump(size = 2) +  # Bump lines
geom_point(size = 3) +  # Points at each year
scale_y_reverse() +  # Reverse the y-axis to show rankings correctly (higher ranks at the top)
labs(
title = "Album Ranking Changes Over Time",
x = "Year",
y = "Rank",
caption = "Source: Rolling Stone Top 500 Albums"
) +
theme_minimal() +
theme(legend.position = "none")
install.packages("ggbump")
library(ggbump)
# Reshape the data to long format
df_long <- df[, .(clean_name, rank_2003, rank_2012, rank_2020)]
df_long <- melt(df_long, id.vars = "clean_name", variable.name = "year", value.name = "rank")
# Convert year to numeric for proper ordering
df_long$year <- as.numeric(gsub("rank_", "", df_long$year))
# Plot bump chart
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name)) +
geom_bump(size = 2) +  # Bump lines
geom_point(size = 3) +  # Points at each year
scale_y_reverse() +  # Reverse the y-axis to show rankings correctly (higher ranks at the top)
labs(
title = "Album Ranking Changes Over Time",
x = "Year",
y = "Rank",
caption = "Source: Rolling Stone Top 500 Albums"
) +
theme_minimal() +
theme(legend.position = "none")  # Optionally remove the legend for cleaner visualization
View(df_long)
# Reshape the data to long format
df_long <- df[, .(clean_name, rank_2003, rank_2012, rank_2020)]
df_long <- melt(df_long, id.vars = "clean_name", variable.name = "year", value.name = "rank")
# Convert year to numeric for proper ordering
df_long$year <- as.numeric(gsub("rank_", "", df_long$year))
df_long
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name))
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name)) +
geom_bump(size = 2)
library(ggbump)
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name)) +
geom_bump(size = 2)
library(dplyr)
# Plot bump chart
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name)) +
geom_bump(size = 2) +  # Bump lines
geom_point(size = 3) +  # Points at each year
scale_y_reverse() +  # Reverse the y-axis to show rankings correctly (higher ranks at the top)
labs(
title = "Album Ranking Changes Over Time",
x = "Year",
y = "Rank",
caption = "Source: Rolling Stone Top 500 Albums"
) +
theme_minimal() +
theme(legend.position = "none")  # Optionally remove the le
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name)) +
geom_bump(size = 2) +  # Bump lines
geom_point(size = 3)
ggplot(df_long, aes(x = year, y = rank, color = clean_name, group = clean_name)) +
geom_bump(size = 1) +  # Bump lines
geom_point(size = 3)
# Combine artist name and album for the y-axis label
df_long$album_label <- paste(df_long$clean_name, df_long$album, sep = " - ")
# Reshape the data to long format
df_long <- df[, .(clean_name, rank_2003, rank_2012, rank_2020)]
df_long <- melt(df_long, id.vars = "clean_name", variable.name = "year", value.name = "rank")
# Combine artist name and album for the y-axis label
df_long$album_label <- paste(df_long$clean_name, df_long$album, sep = " - ")
# Order the data using data.table's setorder
setorder(df_long, clean_name, year)
df_long
# Reshape the data to long format
df_long <- df[, .(clean_name, rank_2003, rank_2012, rank_2020)]
df <- df[, .(clean_name, album, rank_2003, rank_2012, rank_2020)]
df_long <- melt(df_long, id.vars = "clean_name", variable.name = "year", value.name = "rank")
df_long <- melt(df, id.vars = "clean_name", variable.name = "year", value.name = "rank")
# Combine artist name and album for the y-axis label
df$album_label <- paste(df$clean_name, df$album, sep = " - ")
df_long <- melt(df, id.vars = "album_label", variable.name = "year", value.name = "rank")
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020)), ]
df <- df[ which( release_year > 1980 & weeks_on_billboard > 100 ), ]
df <- df[, .(clean_name, album, rank_2003, rank_2012, rank_2020)]
# Combine artist name and album for the y-axis label
df$album_label <- paste(df$clean_name, df$album, sep = " - ")
df_long <- melt(df, id.vars = "album_label", variable.name = "year", value.name = "rank")
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020)), ]
df <- df[ which( release_year > 1980 & weeks_on_billboard > 100 ), ]
df <- df[, .(clean_name, album, rank_2003, rank_2012, rank_2020)]
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020)), ]
df <- df[ which( release_year > 1980 & weeks_on_billboard > 100 ), ]
df <- df[, .(clean_name, album, rank_2003, rank_2012, rank_2020)]
# Combine artist name and album for the y-axis label
df$album_label <- paste(df$clean_name, df$album, sep = " - ")
# Melt the data from wide to long format
df_long <- melt(df, id.vars = c("clean_name", "album"), variable.name = "year", value.name = "rank")
df <- rolling_stone[ which( !is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020)), ]
df <- df[ which( release_year > 1980 & weeks_on_billboard > 100 ), ]
df <- df[, .(clean_name, album, rank_2003, rank_2012, rank_2020)]
# Melt the data from wide to long format
df_long <- melt(df, id.vars = c("clean_name", "album"), variable.name = "year", value.name = "rank")
df_long
# Convert year to numeric for proper ordering
df_long$year <- as.numeric(gsub("rank_", "", df_long$year))
# Combine artist name and album for the y-axis label
df_long$album_label <- paste(df_long$clean_name, df_long$album, sep = " - ")
# Order the data using data.table's setorder
setorder(df_long, clean_name, year)
# Plot bump chart
ggplot(df_long, aes(x = year, y = album_label, color = clean_name, group = clean_name)) +
geom_bump(size = 2) +  # Bump lines
geom_point(size = 3) +  # Points at each year
scale_y_discrete() +  # Use discrete y-axis to display artist and album names
labs(
title = "Album Ranking Changes Over Time",
x = "Year",
y = "Artist - Album",
caption = "Source: Rolling Stone Top 500 Albums"
) +
theme_minimal() +
theme(legend.position = "none")
